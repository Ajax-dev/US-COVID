{
  
    
        "post0": {
            "title": "Interactive COVID-19 Visualization of United States",
            "content": "## generic imports import altair as alt import pandas as pd from vega_datasets import data import glob from os import listdir,path from pathlib import Path counties = alt.topo_feature(data.us_10m.url, &#39;counties&#39;) # used for world visualization later #countries = alt.topo_feature(data.world_110m.url, &#39;countries&#39;) source = data.unemployment.url . # open covid &#39;csse_covid_19_daily_reports_us&#39; filePath = &#39;./COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports_us/01-01-2021.csv&#39; filename = path.basename(&#39;/csse_covid_19_daily_reports_us/01-01-2021.csv&#39;) # filePath = str(filePath) print(filename) df = pd.read_csv(&#39;%s&#39; % filePath) df[&quot;date&quot;] = filename.replace(&#39;.csv&#39;,&#39;&#39;) # df.to_csv(&quot;{filename}.csv&quot;, index=False) # list comprehensions df[&#39;region&#39;] = [fiveRegion(x) for x in df[&#39;Province_State&#39;]] df[&#39;FIPS&#39;] = [int(x) for x in df[&#39;FIPS&#39;]] # cleanup df = df.rename({&quot;Province_State&quot;: &quot;State&quot;, &quot;Country_Region&quot;:&quot;Country&quot;}, axis=&#39;columns&#39;) df.shape . 01-01-2021.csv . (58, 20) . . # Delete rows where region is &#39;not a region&#39; # This deletion is completed by &quot;selecting&quot; rows where regions are non &#39;not a region&#39; df = df.loc[df[&quot;region&quot;] != &#39;Not a region&#39;] df.shape . (50, 20) . . csvlist21 = find_csv_filenames(directory_in_str, &quot;2021.csv&quot;) csvlist20 = find_csv_filenames(directory_in_str, &quot;2020.csv&quot;) csvlist21new = [directory_in_str + s for s in csvlist21] csvlist20new = [directory_in_str + s for s in csvlist20] # print(csvlist) data21 = [] # pd.concat takes a list of dataframes as an agrument data20 = [] # pd.concat takes a list of dataframes as an agrument #https://stackoverflow.com/questions/41857659/python-pandas-add-filename-column-csv #https://stackoverflow.com/questions/9234560/find-all-csv-files-in-a-directory-using-python for csv in csvlist21new: frame = pd.read_csv(csv) datestring = path.basename(csv) curDate = datestring.replace(&#39;.csv&#39;, &#39;&#39;) frame[&#39;date&#39;] = curDate splitDate = curDate.split(&#39;-&#39;) frame[&#39;month&#39;] = splitDate[0] frame[&#39;day&#39;] = splitDate[1] frame[&#39;year&#39;] = splitDate[2] cols=[&#39;year&#39;,&#39;month&#39;,&#39;day&#39;] frame[&#39;ymd&#39;] = frame[cols].apply(lambda x: &#39;-&#39;.join(x.values.astype(str)), axis=&quot;columns&quot;) # frame[&#39;ymd&#39;]=pd.to_datetime(frame[&#39;ymd&#39;]) data21.append(frame) ######### THE SAME FOR 2020 for csv in csvlist20new: frame = pd.read_csv(csv) datestring = path.basename(csv) curDate = datestring.replace(&#39;.csv&#39;, &#39;&#39;) frame[&#39;date&#39;] = curDate splitDate = curDate.split(&#39;-&#39;) frame[&#39;month&#39;] = splitDate[0] frame[&#39;day&#39;] = splitDate[1] frame[&#39;year&#39;] = splitDate[2] cols=[&#39;year&#39;,&#39;month&#39;,&#39;day&#39;] frame[&#39;ymd&#39;] = frame[cols].apply(lambda x: &#39;-&#39;.join(x.values.astype(str)), axis=&quot;columns&quot;) # frame[&#39;ymd&#39;]=pd.to_datetime(frame[&#39;ymd&#39;]) data20.append(frame) # combine all csvs into one csv # add date to each respective file bigframe21 = pd.concat(data21, ignore_index=True) #dont want pandas to try an align row indexes # list comprehensions bigframe21[&#39;region&#39;] = [fiveRegion(x) for x in bigframe21[&#39;Province_State&#39;]] # Delete rows where region is &#39;not a region&#39; # This deletion is completed by &quot;selecting&quot; rows where regions are non &#39;not a region&#39; bigframe21 = bigframe21.loc[bigframe21[&quot;region&quot;] != &#39;Not a region&#39;] bigframe21[&#39;FIPS&#39;] = [int(x) for x in bigframe21[&#39;FIPS&#39;]] # cleanup bigframe21 = bigframe21.rename({&quot;Province_State&quot;: &quot;State&quot;, &quot;Country_Region&quot;:&quot;Country&quot;}, axis=&#39;columns&#39;) ###### THE SAME for 2020 bigframe20 = pd.concat(data20, ignore_index=True) #dont want pandas to try an align row indexes # list comprehensions bigframe20[&#39;region&#39;] = [fiveRegion(x) for x in bigframe20[&#39;Province_State&#39;]] # Delete rows where region is &#39;not a region&#39; # This deletion is completed by &quot;selecting&quot; rows where regions are non &#39;not a region&#39; bigframe20 = bigframe20.loc[bigframe20[&quot;region&quot;] != &#39;Not a region&#39;] bigframe20[&#39;FIPS&#39;] = [int(x) for x in bigframe20[&#39;FIPS&#39;]] # cleanup bigframe20 = bigframe20.rename({&quot;Province_State&quot;: &quot;State&quot;, &quot;Country_Region&quot;:&quot;Country&quot;}, axis=&#39;columns&#39;) # df.to_csv(&quot;total.csv&quot;, index=False) . colorBrewer = alt.Color(&#39;region:N&#39;, scale=alt.Scale(domain=[ &#39;Midwest&#39;, &#39;Northeast&#39;, &#39;Southeast&#39;, &#39;Southwest&#39;, &#39;West&#39; ],range=[&#39;#edf8fb&#39;,&#39;#b2e2e2&#39;,&#39;#66c2a4&#39;,&#39;#2ca25f&#39;,&#39;#006d2c&#39;])) states = alt.topo_feature(data.us_10m.url, &#39;states&#39;) map1= alt.Chart(states).mark_geoshape( fill=&#39;#e8e4f3&#39;, stroke=&#39;black&#39;, strokeWidth=1 ).project( type=&#39;albersUsa&#39; ).properties( width=1000, height=650 ) # map1 click = alt.selection_single(fields=[&#39;State&#39;], bind=&#39;legend&#39;) covid21= alt.Chart(bigframe21).mark_circle().transform_filter( # {&#39;not&#39;: alt.FieldOneOfPredicate(field=&#39;Province_State&#39;, oneOf=[&quot;Diamond Princess&quot;, &quot;Grand Princess&quot;, &quot;Puerto Rico&quot;, &quot;Guam&quot;, &quot;Virgin Islands&quot;])} {&#39;not&#39;: alt.FieldEqualPredicate(field=&#39;region&#39;, equal=&quot;Not a region&quot;)} ).encode( longitude=&#39;Long_:Q&#39;, latitude=&#39;Lat:Q&#39;, color=alt.Color(&#39;region:N&#39;, scale=alt.Scale(scheme=&#39;viridis&#39;)), size=alt.Size(&#39;Confirmed&#39;, # scale=alt.Scale(domain=[-1, 200], range=[10,400]) scale=alt.Scale(range=[100, 3000]), legend=None ), tooltip=[&#39;State:N&#39;,&#39;Confirmed:Q&#39;,&#39;Deaths:Q&#39;], # opacity=alt.condition(click, alt.value(1), alt.value(0.3)) ).properties(width=1000,height=650,title=&#39;Confirmed Cases 2021&#39;) # full map # testArea = alt.layer(areachart, lineChart).add_selection(month_select).transform_filter(month_select).resolve_scale(y=&#39;independent&#39;, color=&#39;independent&#39;).properties(width=600, height=600).interactive() covid20= alt.Chart(bigframe20).mark_circle().transform_filter( # {&#39;not&#39;: alt.FieldOneOfPredicate(field=&#39;Province_State&#39;, oneOf=[&quot;Diamond Princess&quot;, &quot;Grand Princess&quot;, &quot;Puerto Rico&quot;, &quot;Guam&quot;, &quot;Virgin Islands&quot;])} {&#39;not&#39;: alt.FieldEqualPredicate(field=&#39;region&#39;, equal=&quot;Not a region&quot;)} ).encode( longitude=&#39;Long_:Q&#39;, latitude=&#39;Lat:Q&#39;, color=alt.Color(&#39;region:N&#39;, scale=alt.Scale(scheme=&#39;viridis&#39;)), size=alt.Size(&#39;Confirmed&#39;, # scale=alt.Scale(domain=[-1, 200], range=[10,400]) scale=alt.Scale(range=[100, 3000]), legend=None ), tooltip=[&#39;State:N&#39;,&#39;Confirmed:Q&#39;,&#39;Deaths:Q&#39;], # opacity=alt.condition(click, alt.value(1), alt.value(0.3)) ).properties(width=1000,height=650,title=&#39;Confirmed Cases 2020&#39;) map21 = (map1 + covid21) map20 = (map1 + covid20) . Maps of the states showing case number . alt.hconcat(map20, map21) . df_new21 = bigframe21.groupby([&#39;State&#39;,&#39;FIPS&#39;])[[&#39;Deaths&#39;,&#39;Recovered&#39;,&#39;Confirmed&#39;,&#39;region&#39;]].max().reset_index() df_new20 = bigframe20.groupby([&#39;State&#39;,&#39;FIPS&#39;])[[&#39;Deaths&#39;,&#39;Recovered&#39;,&#39;Confirmed&#39;,&#39;region&#39;]].max().reset_index() ## make dataframes that organise 2021 and 2020 by the month df_months21 = bigframe21.groupby([&#39;State&#39;,&#39;FIPS&#39;,&#39;month&#39;])[[&#39;Deaths&#39;,&#39;Recovered&#39;,&#39;Confirmed&#39;,&#39;region&#39;,&#39;ymd&#39;]].max().reset_index() df_months20 = bigframe20.groupby([&#39;State&#39;,&#39;FIPS&#39;,&#39;month&#39;])[[&#39;Deaths&#39;,&#39;Recovered&#39;,&#39;Confirmed&#39;,&#39;region&#39;,&#39;ymd&#39;]].max().reset_index() ### list comprehension to change from aggregated total to running totals # df_months21 = df_months21.groupby(level=0).diff().fillna(df_months21).reset_index() cum_columns = [&#39;Deaths&#39;, &#39;Confirmed&#39;] df_months21 = df_months21.merge( df_months21.groupby(&#39;State&#39;)[cum_columns].diff(), left_index=True, right_index=True, suffixes=[&#39;&#39;, &#39;_uncum&#39;] ).fillna({&#39;{}_uncum&#39;.format(cum_column): df_months21[cum_column] for cum_column in cum_columns}) # print(result) df_months21region = bigframe21.groupby([&#39;month&#39;,&#39;region&#39;])[[&#39;Deaths&#39;,&#39;Recovered&#39;,&#39;Confirmed&#39;,&#39;ymd&#39;]].max().reset_index() # print(df_months21.groupby([&#39;region&#39;, &#39;month&#39;,&#39;Confirmed&#39;]).sum().index) df_months21state = df_months21.groupby([&#39;month&#39;,&#39;State&#39;])[[&#39;Deaths&#39;,&#39;Recovered&#39;,&#39;Confirmed&#39;,&#39;ymd&#39;,&#39;Deaths_uncum&#39;]].max().reset_index() # df_months21.tail(20) ### heatmap data ## 2021 biguncum21 = bigframe21.merge( bigframe21.groupby(&#39;State&#39;)[cum_columns].diff(), left_index=True, right_index=True, suffixes=[&#39;&#39;, &#39;_uncum&#39;] ).fillna({&#39;{}_uncum&#39;.format(cum_column): df_months21[cum_column] for cum_column in cum_columns}) ##2020 biguncum20 = bigframe20.merge( bigframe20.groupby(&#39;State&#39;)[cum_columns].diff(), left_index=True, right_index=True, suffixes=[&#39;&#39;, &#39;_uncum&#39;] ).fillna({&#39;{}_uncum&#39;.format(cum_column): df_months21[cum_column] for cum_column in cum_columns}) # biguncum20.tail() . brush = alt.selection(type=&#39;interval&#39;, encodings=[&#39;x&#39;]) base21 = alt.Chart(df_months21).encode( alt.X(&#39;monthdate(ymd):O&#39;, title=&#39;Date&#39;), alt.Y(&#39;sum(Confirmed):Q&#39;, title=&#39;Confirmed Cases&#39;, scale=alt.Scale(domain=[0,16000000]), axis=alt.Axis(labels=False, title=None)), alt.Color(&#39;region:N&#39;, title=&#39;Region&#39;, scale=alt.Scale(scheme=&#39;viridis&#39;)) ).properties( width=1500, height=1000, title=&#39;Confirmed cases&#39; ) upper21 = base21.encode( alt.X(&#39;monthdate(ymd):O&#39;, title=&#39;Date&#39;, scale=alt.Scale(domain=brush)) ) lower21 = base21.properties( height=200 ).add_selection(brush) base20 = alt.Chart(df_months20).encode( alt.X(&#39;monthdate(ymd):O&#39;, title=&#39;Date&#39;), alt.Y(&#39;sum(Confirmed):Q&#39;, title=&#39;Confirmed Cases&#39;, scale=alt.Scale(domain=[0,16000000])), alt.Color(&#39;region:N&#39;, title=&#39;Region&#39;, scale=alt.Scale(scheme=&#39;viridis&#39;)) ).properties( width=1500, height=1000, title=&#39;Confirmed cases&#39; ) upper20 = base20.encode( alt.X(&#39;monthdate(ymd):O&#39;, title=&#39;Date&#39;, scale=alt.Scale(domain=brush)) ) lower20 = base20.properties( height=200 ).add_selection(brush) chart21line = alt.vconcat(upper21.mark_line(),lower21.mark_area()).resolve_scale(y=&#39;independent&#39;,color=&#39;independent&#39;) chart20line = alt.vconcat(upper20.mark_line(),lower20.mark_area()).resolve_scale(y=&#39;independent&#39;,color=&#39;independent&#39;) upper21clean = base21.encode( alt.X(&#39;month(ymd):O&#39;, title=&#39;Date&#39;) ) upper20clean = base20.encode( alt.X(&#39;month(ymd):O&#39;, title=&#39;Date&#39;) ) alt.hconcat( upper20clean.mark_line(strokeWidth=8), upper21clean.mark_line(strokeWidth=8)).resolve_scale(y=&#39;shared&#39;).configure_legend( titleFontSize=40, labelFontSize=34, symbolStrokeWidth=40).configure_title( fontSize=60).configure_axis( labelFontSize=34, titleFontSize=38 ) . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;month(ymd):O&#39;, title=&#39;Date&#39;), alt.Y(&#39;sum(Confirmed):Q&#39;, title=&#39;Confirmed Cases&#39;, scale=alt.Scale(domain=[0,16000000]), ), alt.Color(&#39;region:N&#39;, title=&#39;Region&#39;, scale=alt.Scale(scheme=&#39;viridis&#39;)) ) layer2= alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;month(ymd):O&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;sum(Confirmed):Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;sum(Confirmed):Q&#39;, ).transform_filter(label), data=df_months21 ).properties( width=900, height=750, title=&#39;Confirmed cases&#39; ) layer1= alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;month(ymd):O&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;sum(Confirmed):Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;sum(Confirmed):Q&#39; ).transform_filter(label), data=df_months20 ).properties( width=900, height=750, title=&#39;Confirmed cases&#39; ) deaths21 = alt.Chart(df_months21).mark_bar().encode( alt.X(&#39;month(ymd):O&#39;, title=&#39;Month&#39;), alt.Y(&#39;max(Deaths):Q&#39;, title=&#39;Deaths&#39;, scale=alt.Scale(domain=[0,320000]), axis=alt.Axis(labels=False, title=None)), alt.Color(&#39;region:N&#39;, title=&#39;Region&#39;, scale=alt.Scale(scheme=&#39;viridis&#39;)), # tooltip=[&#39;State:N&#39;] ).properties( width=900, height=750, title=&#39;Cumulative Deaths by US Region&#39; ) deaths20 = alt.Chart(df_months20).mark_bar().encode( alt.X(&#39;month(ymd):O&#39;, title=&#39;Month&#39;), alt.Y(&#39;max(Deaths):Q&#39;, title=&#39;Deaths&#39;, scale=alt.Scale(domain=[0,320000])), alt.Color(&#39;region:N&#39;, title=&#39;Region&#39;, scale=alt.Scale(scheme=&#39;viridis&#39;)), # tooltip=[&#39;State:N&#39;] ).properties( width=900, height=750, title=&#39;Cumulative Deaths by US Region&#39; ) # (deaths20 | deaths21).resolve_scale(y=&#39;shared&#39;).configure_legend( # titleFontSize=40, # labelFontSize=34, # symbolStrokeWidth=40, # symbolSize=400).configure_title( # fontSize=60,).configure_axis( # labelFontSize=34, # titleFontSize=38 # ) # https://altair-viz.github.io/user_guide/transform/lookup.html chloroYear21 = alt.Chart(states).mark_geoshape(stroke=&#39;black&#39;, strokeWidth=1).encode( # color=&#39;Deaths:Q&#39;, color=alt.Color(&#39;Deaths:Q&#39;, scale=alt.Scale(scheme=&#39;viridis&#39;)), tooltip=[&#39;State:N&#39;,&#39;Confirmed:Q&#39;,&#39;Recovered:Q&#39;,&#39;Deaths:Q&#39;], ).transform_lookup( # the value in the data url I will map to, basically the point that joins the 2 data sources, must be the same lookup=&#39;id&#39;, # linking id from https://raw.githubusercontent.com/vega/vega-datasets/next/data/us-10m.json # with FIPS from the dataframe from_=alt.LookupData(data=df_new21, key=&#39;FIPS&#39;, fields=[&#39;Deaths&#39;,&#39;State&#39;,&#39;Confirmed&#39;,&#39;Recovered&#39;]) ).project( type=&#39;albersUsa&#39; ).properties( width=900, height=750, title=&quot;COVID-19 stats for 2021&quot; ) # same for 2020 # https://altair-viz.github.io/user_guide/transform/lookup.html chloroYear20 = alt.Chart(states).mark_geoshape(stroke=&#39;black&#39;, strokeWidth=1).encode( # color=&#39;Deaths:Q&#39;, color=alt.Color(&#39;Deaths:Q&#39;, scale=alt.Scale(scheme=&#39;viridis&#39;)), tooltip=[&#39;State:N&#39;,&#39;Confirmed:Q&#39;,&#39;Recovered:Q&#39;,&#39;Deaths:Q&#39;], ).transform_lookup( # the value in the data url I will map to, basically the point that joins the 2 data sources, must be the same lookup=&#39;id&#39;, # linking id from https://raw.githubusercontent.com/vega/vega-datasets/next/data/us-10m.json # with FIPS from the dataframe from_=alt.LookupData(data=df_new20, key=&#39;FIPS&#39;, fields=[&#39;Deaths&#39;,&#39;State&#39;,&#39;Confirmed&#39;,&#39;Recovered&#39;]) ).project( type=&#39;albersUsa&#39; ).properties( width=900, height=750, title=&quot;COVID-19 stats for 2020&quot; ) # alt.vconcat(chloroYear21,chloroYear20) # (chloroYear20 | chloroYear21).resolve_scale(y=&#39;shared&#39;).configure_legend( # titleFontSize=34, # labelFontSize=34, # symbolStrokeWidth=60, # symbolSize=300).configure_title( # fontSize=50).configure_axis( # labelFontSize=20, # titleFontSize=28 # ) heatmap21 = alt.Chart(bigframe21).mark_rect().encode( alt.X(&#39;month(date):O&#39;, title=&#39;Month&#39;), alt.Y(&#39;State:N&#39;, title=&#39;State&#39;, axis=alt.Axis(labels=False, title=None)), alt.Color(&#39;Deaths:Q&#39;, title=&#39;Deaths&#39;, scale=alt.Scale(scheme=&#39;viridis&#39;), legend=alt.Legend(title=&#39;Total&#39;)), tooltip=[&#39;region:N&#39;,&#39;State:N&#39;,&#39;Deaths:Q&#39;] ).properties(title= &#39;Cumulative Deaths by State&#39;, width=900, height=750) heatmap20 = alt.Chart(bigframe20).mark_rect().encode( alt.X(&#39;month(ymd):O&#39;, title=&#39;date&#39;), alt.Y(&#39;State:N&#39;, title=&#39;State&#39;), alt.Color(&#39;Deaths:Q&#39;, title=&#39;Deaths&#39;, scale=alt.Scale(scheme=&#39;viridis&#39;), legend=alt.Legend(title=&#39;Total&#39;)), tooltip=[&#39;Deaths:Q&#39;] ).properties(title=&#39;Cumulative Deaths by State&#39;, width=900, height=750) # (heatmap20 | heatmap21).resolve_scale(y=&#39;shared&#39;).configure_legend( # titleFontSize=40, # labelFontSize=34, # symbolStrokeWidth=40).configure_title( # fontSize=60).configure_axis( # labelFontSize=24, # titleFontSize=38 # ) chloroLayers = alt.hconcat(chloroYear20,chloroYear21).resolve_scale(y=&#39;shared&#39;) lineLayers = alt.hconcat(layer1,layer2).resolve_scale(y=&#39;shared&#39;) barLayers = alt.hconcat(deaths20,deaths21).resolve_scale(y=&#39;shared&#39;) heatmapLayers = alt.hconcat(heatmap20, heatmap21).resolve_scale(y=&#39;shared&#39;) # lineLayers = alt.hconcat(layer1,layer2).resolve_scale(y=&#39;shared&#39;).configure_legend( # titleFontSize=40, # labelFontSize=34, # symbolStrokeWidth=20).configure_title( # fontSize=60).configure_axis( # labelFontSize=34, # titleFontSize=38 # ) . dashboard= alt.vconcat(chloroLayers, lineLayers, barLayers, heatmapLayers).configure_legend( titleFontSize=40, labelFontSize=34, symbolStrokeWidth=20).configure_title( fontSize=60).configure_axis( labelFontSize=34, titleFontSize=38 ) . Chloropleths showing Deaths 2020 and 2021 . alt.hconcat(chloroYear20,chloroYear21).resolve_scale(y=&#39;shared&#39;).configure_legend( titleFontSize=40, labelFontSize=34, symbolStrokeWidth=20).configure_title( fontSize=60).configure_axis( labelFontSize=20, titleFontSize=28 ) #.show() exports to localhost and displays . Line graph showing confirmed cases by Region . alt.hconcat(layer1,layer2).resolve_scale(y=&#39;shared&#39;).configure_legend( titleFontSize=40, labelFontSize=34, symbolStrokeWidth=20).configure_title( fontSize=60).configure_axis( labelFontSize=20, titleFontSize=28 ) . Stacked bar chart of deaths by region 2020 and 2021 . alt.hconcat(deaths20,deaths21).resolve_scale(y=&#39;shared&#39;).configure_legend( titleFontSize=40, labelFontSize=34, symbolStrokeWidth=20).configure_title( fontSize=60).configure_axis( labelFontSize=20, titleFontSize=28 ) . Heatmap showing death toll by State 2020 and 2021 . alt.hconcat(heatmap20, heatmap21).resolve_scale(y=&#39;shared&#39;).configure_legend( titleFontSize=40, labelFontSize=34, symbolStrokeWidth=20).configure_title( fontSize=60).configure_axis( labelFontSize=20, titleFontSize=28 ) .",
            "url": "https://ajax-dev.github.io/US-COVID/fastpages/jupyter/visualization/covid/usa/altair/2022/01/06/US-COVID-Statistics.html",
            "relUrl": "/fastpages/jupyter/visualization/covid/usa/altair/2022/01/06/US-COVID-Statistics.html",
            "date": " • Jan 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ajax-dev.github.io/US-COVID/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ajax-dev.github.io/US-COVID/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ajax-dev.github.io/US-COVID/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ajax-dev.github.io/US-COVID/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}